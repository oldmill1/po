"""
Template files for generated libraries
"""

def get_templates(project_name):
    """Return dictionary of file paths and their content templates"""
    
    # Convert project name to valid Python identifier
    module_name = project_name.replace('-', '_').replace(' ', '_').lower()
    
    # Use a more descriptive package name to avoid confusion
    package_name = f"{module_name}_lib"
    
    templates = {
        'setup.py': get_setup_py_template(project_name, package_name),
        'README.md': get_readme_template(project_name),
        'requirements.txt': get_requirements_template(),
        '.gitignore': get_gitignore_template(),
        f'{package_name}/__init__.py': get_init_template(package_name),
        f'{package_name}/__main__.py': get_main_template(package_name),
        f'{package_name}/cli.py': get_cli_template(package_name),
    }
    
    return templates


def get_setup_py_template(project_name, module_name):
    """Setup.py template"""
    return f'''from setuptools import setup, find_packages

setup(
    name="{project_name}",
    version="0.1.0",
    description="A Python library generated by libgen",
    author="Your Name",
    author_email="your.email@example.com",
    packages=find_packages(),
    python_requires=">=3.7",
    install_requires=[
        "click>=7.0",
    ],
    entry_points={{
        "console_scripts": [
            "{project_name}={module_name}.cli:main",
        ],
    }},
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Intended Audience :: Developers",
        "License :: OSI Approved :: MIT License",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.7",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: 3.12",
    ],
)
'''


def get_readme_template(project_name):
    """README.md template"""
    return f'''# {project_name}

A Python library generated by po.

## Installation

```bash
pip install -e .
```

## Usage

```bash
{project_name} --help
```

## Development

This library was generated using [po](https://github.com/yourusername/po).
'''


def get_requirements_template():
    """requirements.txt template"""
    return '''click>=7.0
'''


def get_gitignore_template():
    """gitignore template"""
    return '''# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pipenv
#Pipfile.lock

# poetry
#poetry.lock

# pdm
#pdm.lock
.pdm.toml

# PEP 582
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
.idea/
*.iml
*.ipr
*.iws

# VS Code
.vscode/

# macOS
.DS_Store
.AppleDouble
.LSOverride

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# Linux
*~

# Temporary files
*.tmp
*.temp
*.swp
*.swo
*~

# Logs
*.log
'''


def get_init_template(module_name):
    """__init__.py template"""
    return f'''"""
{module_name} - A Python library generated by po
"""

__version__ = "0.1.0"
__author__ = "Your Name"
__email__ = "your.email@example.com"
'''


def get_main_template(module_name):
    """__main__.py template"""
    return f'''#!/usr/bin/env python3
"""
Main entry point for {module_name}
"""

from .cli import main

if __name__ == '__main__':
    main()
'''


def get_cli_template(module_name):
    """cli.py template"""
    return f'''"""
CLI interface for {module_name}
"""

import click


@click.command()
@click.option('--name', '-n', default='World', help='Name to greet')
def main(name):
    """
    A simple CLI tool that says hello.
    
    This is a default template generated by po.
    """
    click.echo(f"Hello, {{name}}!")


if __name__ == '__main__':
    main()
'''
